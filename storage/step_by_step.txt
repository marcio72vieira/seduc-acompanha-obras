*********************************************
*    EXEMPLO DE ENVIO DE EMAIL COM CÓPIA    *
*********************************************
1   -   Para enviar e-mail com cópias para duas ou mais caixas de e-mail, copie o trecho de código abaixo no método de envio de amail no controller como segue abaixo



************************************************************
*    ENVIANDO EMAIL COM DADOS DO FORMULÁRIO VIA MARKDOWN   *
************************************************************
1   -   Criar a classe de email com o "markdonw" com o comando abaixo:
            ./vendor/bin/sail artisan artisan make:mail EmailcomMarkdown --markdown=emails.emailcommarkdown
            php artisan make:mail EmailcomMarkdown --markdown=emails.emailcommarkdown

            onde:
                EmailcomMarkdown = é o nome da classe a ser criada no diretório app/Mail
                --markdown =  é o parâmetro que irá crir o markdown (ou seja, uma pseudo view com parâmetros pré-configurados)
                emails = é a pasta que será criada na pasta resources/views para conter os emails com markdown
                emailcommarkdown = é o nome do markdown (pseudo view) que será criada de fato no diretório resources/views/emails

2   -   Após o execução do comando acima, será criado a classe: app/Mail/EmailcomMarkdown.php. Para seu uso adequado, importa a classe:
            use Illuminate\Mail\Mailables\Address;

        OBSERVAÇÃO: Nesta classe, o trecho de código que irá fazer referência ao arquivo de markdown, está localizado em:
            ...
            public function content(): Content
            {
                return new Content(
                    markdown: 'emails.emailcommarkdown',
                );
            }
            ...

3   -   Sinta-se à vontade para utilizar a classe app/Mail/EmailcomMarkdown.php, como se estivesse enviando um e-mail com uma view normalmente.


4   -   Após a execução do comando acima, será criado o arquivo: resources/views/emails/emailcommarkdown.blade.php, com o seguinte conteúdo:
            <x-mail::message>
            # Introduction

            The body of your message.

            <x-mail::button :url="''">
            Button Text
            </x-mail::button>

            Thanks,<br>
            {{ config('app.name') }}
            </x-mail::message>

            OBSERVAÇÃO:
                Na seção do trecho de código acima: "The body of your message." Você pode colocar qualquer marcação HTML que você desejar, pois é um arquivo blade normal.
                Sinta-se vontade para alterá-lo como desejar.

            OBSERVAÇÃO:
                Sites de referência: https://www.youtube.com/watch?v=sH_eEEGlEjE
                                     https://www.youtube.com/watch?v=nxUoA9K74lQ


4   -   Criar rota para envio de email com informações do usuário, como descrito abaixo:
            ...
            Route::get('/sendemail-user', [UserController::class, 'sendemail'])->name('user.sendemail');
            ...

5   -   Criar método para envio de email no controller UserController, como descrito abaixo:
            // Envia e-mail com informações do usuário, utilizando "markdown" ao invés de uma view comum
            public function sendemail(User $user)
            {

                // Dados que serão enviados ao construtor da classe EmailcomMarkdown (app/Mail/EmailcomMarkdown.php)
                $dados = [
                    'id'            => $user->id,
                    'nomecompleto'  => $user->nomecompleto,
                    'nome'          => $user->nome,
                    'cpf'           => $user->cpf,
                    'cargo'         => $user->cargo,
                    'fone'          => $user->fone,
                    'perfil'        => ($user->perfil == "adm" ? "Administrador" : ($user->perfil == "con" ? "Consultor" : "Operador")),
                    'email'         => $user->email,
                ];


                try {

                    $envioEmail = Mail::to($user->email, $user->nome)->send(new EmailcomMarkdown($dados));

                    if($envioEmail){
                        // Redirecionar o usuário, enviar a mensagem de sucesso
                        return redirect()->route('user.index')->with('success', 'E-mail enviado com sucesso!');
                    } else {
                        // Redirecionar o usuário, enviar a mensagem de sucesso
                        return redirect()->route('user.index')->with('error', 'Não foi possível enviar o e-mail no momento, tente mais tarde ou contact o administrador do sistema!');
                    }

                } catch (Exception $e) {

                    // Redirecionar o usuário, enviar a mensagem de erro
                    return redirect()->route('user.index')->with('error-exception', 'E-mail não enviado. Tente mais tarde!');
                }
            }


        OBSERVAÇÃO:
            Para acessar uma variável de configuração em um VIEW utilize a sgintaxe:
                "Se o link acima não funcionar, copie e cole esta URL: {{ \Config::get('app.url'); }} em seu navegador preferido.<br><br>
            Para acessar uma variável de configuração em qualquer outra parte (controllers, models, markdonw etc..) do sistema no Laravel, utilize a sintax:
                em um array: ['urlapp' => Config('app.url')], acessando  a variável app.url definida em config/app.php diretamente
                em um markdown: <x-mail::button :url="Config('app.url')">
                como uma variável: $my_varible_url =  Config('app.url);




********************************************************
*    ENVIANDO EMAIL COM DADOS DO FORMULÁRIO VIA VIEW   *
********************************************************
1   -   Criar a classe de email com o comando abaixo.
            ./vendor/bin/sail artisan make:mail EmailAcesso
            OU
            php artisan make:mail EmailAcesso

2   -   O comando acima, irá criar a classe de email na seguinte pasta:
            app/Mail/EmailAcesso.php

3   -   Implemente a classe "app/Mail/EmailAcesso.php" conforme modelo abaixo, observando os comentários
            <?php

            namespace App\Mail;

            use Illuminate\Bus\Queueable;
            use Illuminate\Contracts\Queue\ShouldQueue;
            use Illuminate\Mail\Mailable;
            use Illuminate\Mail\Mailables\Address;
            use Illuminate\Mail\Mailables\Content;
            use Illuminate\Mail\Mailables\Envelope;
            use Illuminate\Queue\SerializesModels;

            class EmailAcesso extends Mailable
            {
                use Queueable, SerializesModels;


                public function __construct(public readonly array $dados)
                {
                    //dd($dados);
                    //Obs: $dados é acessivel na view de email(admin.users.emailacesso), nativamente
                    //     Não há a necessidade de se criar um variavel do tipo private $dados e atribuir seu valor com $this->dados = $dados.
                    //     A nova função "promotion" do Php 8.3 faz isso de forma automática.
                }


                public function envelope(): Envelope
                {
                    return new Envelope(
                        from: new Address('seduc@email.ma.gov.br', 'SEDUC'),
                        subject: 'Credenciais de Acesso ao Sistema de Acompanhamento de Obras da SEDUC',
                    );
                }


                // View que irá conter o corpo do email a ser enviado para o usuário
                public function content(): Content
                {
                    return new Content(
                        view: 'admin.users.mailacesso',
                    );
                }

                public function attachments(): array
                {
                    return [];
                }
            }



4   -   Implemente a view de email localizada em: resources/views/admin/users/mailacesso.blade.php conforme abaixo:
            <h3>CREDENCIAIS PARA ACESSAR SISTEMA</h3>
            <br>

            Olá {{ $dados['nome']}}!<br>
            Você foi cadastrado(a) para acessar o <strong>Sistema de Acompanhmaento de Obras da SEDUC</strong>, da Secretaria de Estado da Educação / SEDUC, com o perfil de <strong>"{{ $dados['perfil']}}"</strong> no Sistema.<br><br>
            <strong>Observações Importantes:</strong><br>
            1 - Efetue seu "login(acesso)" com as credenciais(e-mail e senha) fornecidas aqui. <br>
            2 - Em seu primeiro acesso, por questões de segurança, você será solicitado a substituir a senha atual por uma nova senha.<br>
            3 - Efetue seu login com a nova senha cadastrada.<br><br>

            <strong>Segue suas credenciais:</strong><br>
            <strong>E-mail:</strong> {{ $dados['email'] }}<br>
            <strong>Senha:</strong> {{ $dados['senha'] }}<br><br><br>

            Acesse o sistema clicando <a href="{{ \Config::get('app.url'); }}">aqui!</a>
            <br><br>
            Se o link acima não funcionar, copie e cole esta URL: {{ \Config::get('app.url'); }} em seu navegador preferido.<br><br>

            <strong>Atenciosamente!</strong> <br>
            Administrador do Sistema de Acompanhmento de Obras/SEDUC.



5   -   Implemente o "trecho de código de envio de e-maiil", logo após cadastrar o usuario conforme descrito abaixo no método "store" do controller UserController.
            a   -   Importar as classes:
                        use App\Mail\EmailAcesso;
                        use Illuminate\Support\Facades\Mail;

            b   -   Acrescentar o trecho de código de envio de e-mail, como abaixo, logo após salvar o usuário no banco de dados
                    // Cadastrar no banco de dados na tabela usuários
                    User::create([
                        'nomecompleto' => $request->nomecompleto,
                        'nome' => $request->nome,
                        'cpf' => $request->cpf,
                        'cargo' => $request->cargo,
                        'fone' => $request->fone,
                        'perfil' => $request->perfil,
                        'email' => $request->email,
                        'password' => $request->password,
                        'ativo' => $request->ativo,
                        'primeiroacesso' => 1
                    ]);

                    // Dados que serão enviados ao construtor da classe EmailAcesso
                    $dados = [
                        'nome' => $request->nomecompleto,
                        'email' => $request->email,
                        'senha' => $request->password,
                        'perfil' => ($request->perfil == "adm" ? "Administrador" : ($request->perfil == "con" ? "Consultor" : "Operador"))
                    ];

                    // Dados que serão enviados ao construtor da classe EmailAcesso
                    $dados = [
                        'nome' => $request->nomecompleto,
                        'email' => $request->email,
                        'senha' => $request->password,
                        'perfil' => ($request->perfil == "adm" ? "Administrador" : ($request->perfil == "con" ? "Consultor" : "Operador"))
                    ];

                    $envioEmail = Mail::to($request->email, $request->nome)->send(new EmailAcesso($dados));

                    if($envioEmail){
                        // Redirecionar o usuário, enviar a mensagem de sucesso
                        return redirect()->route('user.index')->with('success', 'Usuário cadastrado com sucesso!');
                    } else {
                        // Redirecionar o usuário, enviar a mensagem de sucesso
                        return redirect()->route('user.index')->with('success', 'Usuário cadastrado com sucesso, mas houve falha no envio do E-mail!');
                    }













************************************************************************************
*    TRADUZINDO MENSAGENS DO LARAVEL PARA O PORTUGUES INCLUSIVE A DO RESET SENHA   *
************************************************************************************
1   -   Acessar página abaixo:
            https://github.com/lucascudo/laravel-pt-BR-localization

2   -   Na documentação da página utilizar os comandos abaixo:
            a   -   ./vendor/bin/sail artisan artisan lang:publish OU php artisan lang:publish
            b   -   ./vendor/bin/sail artisan composer require lucascudo/laravel-pt-br-localization --dev OU composer require lucascudo/laravel-pt-br-localization --dev
            c   -   ./vendor/bin/sail artisan vendor:publish --tag=laravel-pt-br-localization OU php artisan vendor:publish --tag=laravel-pt-br-localization

3   -   Configure o Framework para utilizar 'pt_BR' como linguagem padrão
            // Altere Linha 81 do arquivo config/app.php
            de:
                'locale' => env('APP_LOCALE', 'en'),
            para:
                'locale' => 'pt_BR'

            // Para versões >= 11.x altere a linha 8 do arquivo .env
            de:
                APP_LOCALE=en
            para:
                APP_LOCALE=pt_BR




*************************
*    MÓDULO DE LOGIN    *
*************************
1   -   Criar rotas no arquivo routes/web.php para manipulação do login, conforme descrito abaixo:
            Route::get('/', [LoginController::class, 'index'])->name('login.index');
            Route::post('/login', [LoginController::class, 'processalogin'])->name('login.processalogin');
            Route::get('/logout', [LoginController::class, 'logout'])->name('login.logout');

2   -   Criar os seguintes arquivos pra processar o login:
            app/Http/Controllers/Publico/LoginController.php
            app/Http/Requests/LoginRequest.php
            resources/views/publico/login/index.blade.php

3 -     Criar método index() no controler LoginController para exibir view (/views/publico/login/index.blade.php) com o formulŕio para entrar com dados do login
            public function index()
            {
                // Carregar a view
                return view('publico.login.index');
            }

4   -   Criar método processalogin no controller LoginController par autenticar usuŕio na apalicação
            public function processalogin(LoginRequest $request)
            {
                // Validar o formulário
                $request->validated();

                ....
            }

5   -   Crir o método primeiroacesso caso haja necessidade ou a aplicação assim o exigir
            // Carregar o formulário recadastrar senha no caso do primeiro acesso
            public function createprimeiroacesso(User $user)
            {
                // Carregr a view
                return view('publico.login.primeiroacesso', ['user' => $user]);
            }

6   -   Criar o método logout() no controler LoginController
                public function logout()
                {
                    // Deslogar o usuário
                    Auth::logout();

                    // Redireciona o usuário enviando a mensagem de sucesso
                    return redirect()->route('login.index')->with('success', 'Deslogado com sucesso!');

                }

7   -   Redirecionar o usuário para uma róta específica, caso o mesmo não esteja autenticado e queira acessar uma rota que exija autenticação.
            Modifique o método no arquivo: bootstrap/app.php, conforme abaixo:
                ...
                ->withMiddleware(function (Middleware $middleware) {
                    $middleware->redirectGuestsTo('/');
                })
                ...





******************************************
*    CRIANDO MÓDULO FORGOT PASSWORD      *
******************************************
1   -   Criar rotas no arquivo routes/web.php para manipulação do esquecimento de senha, conforme descrito abaixo:
            Route::get('/forgot-password', [ForgotPasswordController::class, 'showForgotPassword'])->name('forgot-password.show');
            Route::post('/forgot-password', [ForgotPasswordController::class, 'submitForgotPassword'])->name('forgot-password.submit');
            Route::get('/reset-password/{token}', [ForgotPasswordController::class, 'showResetPassword'])->name('password.reset');
            Route::post('/reset-password', [ForgotPasswordController::class, 'submitResetPassword'])->name('reset-password.submit');

2   -   Criar controller ForgotPasswordController e implementar os seguintes métodos, conforme apliação anoatual

3   -   Criar as view invocadas nos métodos do passo anterior, coforme modelo da aplicação anoatual

        OBSERVAÇÃO:
            O método "showResetPassword", que exibe a view "resetPassword" é invocado a partir do botão que é enviado no corpo do email para o usuário que esqueceu a senha
            public function showResetPassword(Request $request)
            {
                // Carregar a view
                return view('publico.login.resetPassword', ['token' => $request->token]);

            }





********************************************************
*     ENVIANDO E-MAIL RESETAR SENHA PASSO A PASSO      *
********************************************************
1   -   Crie o layout do e-mail através dos comandos abaixo:
            ./vendor/bin/sail artisan vendor:publish --tag=laravel-mail
            OU
            php artisan vendor:publish --tag=laravel-mail

2   -   No arquivo: resources/views/vendor/mail/html/header.blade.php (criado pelo comando acima), substitua o trecho de código conforme abaixo para exibir a logo da aplicação correspondente no corpo do e-mail
            Trecho original:
                @props(['url'])
                <tr>
                <td class="header">
                <a href="{{ $url }}" style="display: inline-block;">
                @if (trim($slot) === 'Laravel')
                <img src="https://laravel.com/img/notification-logo.png" class="logo" alt="Laravel Logo">
                @else
                {{ $slot }}
                @endif
                </a>
                </td>
                </tr>

            Trecho a ser substituido
                @props(['url'])
                <tr>
                <td class="header">
                <a href="{{ $url }}" style="display: inline-block;">
                @if (trim($slot) === 'Laravel')
                <img src="https://laravel.com/img/notification-logo.png" class="logo" alt="Laravel Logo">
                @else
                {{-- {{ $slot }} --}}
                <img src="{{ asset('images/logo_seduc.png') }}" width="200" alt="SEDUC Logo">
                @endif
                </a>
                </td>
                </tr>



        OBSERVAÇÃO:
            Links de aulas referente ao módulo de forgotpasswor do curso do Celke
                Re: Texto gerado no e-mail
                Publicado 05 de julho de 2024, 11:09 - Cesar
                Bom dia, Sergio,
                Complementando a minha resposta anterior, o diretório "resources/views/vendor/email" contém apenas o layout; o conteúdo do e-mail é gerado pela função do próprio Laravel.
                Nos meus projetos, não utilizo esse e-mail padrão. Prefiro personalizar, seguindo a ideia deste vídeo: https://www.youtube.com/watch?v=PN7p9dzwjqw
                Como fazer o deploy do projeto para produção: https://www.youtube.com/watch?v=DxHZNBdurvI&list=PLmY5AEiqDWwDOQa-j8lPAdWDUvN6Rbyqo&index=35
                Enviar e-mail em produção: https://www.youtube.com/watch?v=Cp6Nn0u3ND8&list=PLmY5AEiqDWwDOQa-j8lPAdWDUvN6Rbyqo&index=36
                Configurar domínio personalizado: https://www.youtube.com/watch?v=TywTQAbOw_k&list=PLmY5AEiqDWwDOQa-j8lPAdWDUvN6Rbyqo&index=37







******************************************************
*    CRIANDO UMA VALIDAÇÃO DE CPF PERSONALIZADA      *
******************************************************
1   -   Crie a validação com o comando abaixo:
            ./vendor/bin/sail artisan make:rule CpfValidadeRule

2   -   Copiar o código abaixo no arquivo gerado em: app/Rules/CpfValidateRule.php com o comando acima:
            <?php

            namespace App\Rules;

            use Closure;
            use Illuminate\Contracts\Validation\ValidationRule;

            class CpfValidateRule implements ValidationRule
            {
                /**
                * Run the validation rule.
                *
                * @param  \Closure(string, ?string=): \Illuminate\Translation\PotentiallyTranslatedString  $fail
                */
                public function validate(string $attribute, mixed $value, Closure $fail): void
                {
                    // Atribuindo à variável cpf o valor recebido
                    $cpf = $value;


                    // Extrai somente os números
                    $cpf = preg_replace( '/[^0-9]/is', '', $cpf );

                    // Verifica se foi informado todos os digitos corretamente
                    if (strlen($cpf) != 11) {
                        $fail('CPF inválido');
                    }

                    // Verifica se foi informada uma sequência de digitos repetidos. Ex: 111.111.111-11
                    if (preg_match('/(\d)\1{10}/', $cpf)) {
                        $fail('CPF inválido');
                    }

                    // Faz o calculo para validar o CPF
                    if(strlen($cpf) == 11) {
                        for ($t = 9; $t < 11; $t++) {
                            for ($d = 0, $c = 0; $c < $t; $c++) {
                                $d += $cpf[$c] * (($t + 1) - $c);
                            }
                            $d = ((10 * $d) % 11) % 10;
                            if ($cpf[$c] != $d) {
                                $fail('CPF inválido');
                            }
                        }
                    } else {
                        $fail('CPF inválido');
                    }
                }
            }

3   -   Fazer uso da validação na request app/Http/Requests/UserRequest.php ou onde mais se fizer necessário, conforme abaixo:
            ...
            use App\Rules\CpfValidateRule;
            ...

            $rules = [
                'nomecompleto'          => 'required',
                'nome'                  => 'required',
                'cpf'                   => ['required', 'unique:users,cpf,'. ($userId ? $userId->id : null), new CpfValidateRule()],
            ...
            ]


            $messages = [
                        'nomecompleto.required'             => 'O campo Nome Completo é obrigatório!',
                        'nome.required'                     => 'O campo Nome é obrigatório!',
                        'cpf.required'                      => 'O campo CPF é obrigatório!',
                        'cpf.unique'                        => 'Este CPF já está cadastrado!',
            ...
            ]





*************************************************************
*    CRIANDO MIDDLEWARE PERSONALIZADOS COM GATES/POLICES    *
*************************************************************
1   -   No arquivo: app/Providers/AppServiceProvider.php importar as seguinte classe
        ...
        use Illuminate\Pagination\Paginator;
        use Illuminate\Support\ServiceProvider;
        use Illuminate\Auth\Access\Response;
        use Illuminate\Support\Facades\Gate;
        use Illuminate\Support\Facades\URL;
        ...

2   -   No método boot() da classe AppServiceProvider, aplicar as seguintes regras
        class AppServiceProvider extends ServiceProvider
        {
            ...
            public function boot(): void
            {
                // Define o acesso apenas de quem é Administrdor
                Gate::define('onlyAdm', function($user) {
                    return $user->perfil == 'adm'
                        ? Response::allow()
                        : Response::deny('Acesso não autorizado!');
                });


                // Define o acesso apenas de quem é Administrador ou Consultor
                Gate::define('onlyAdmCon', function($user) {
                    return $user->perfil == 'adm' || $user->perfil == 'con'
                        ? Response::allow()
                        : Response::deny('Acesso não autorizado!');
                });


                // Define o acesso apenas de quem é Administrador ou Operador.
                Gate::define('onlyAdmOpe', function($user) {
                    return $user->perfil == 'adm' || $user->perfil == 'ope'
                        ? Response::allow()
                        : Response::deny('Acesso não autorizado!');
                });
            }
        }

3   -   Aplicar os Gates(middleware) nas rotas desejadas, como no exemplo abaixo:
        // Rotas para quem deve está autenticado com o middleware "auth"
        Route::group(['middleware' => 'auth'], function(){
            // DASHBOARD
            Route::get('/index-dashboard', [DashboardController::class, 'index'])->name('dashboard.index');
            // PROFILE
            Route::get('/edit-profile-user', [UserController::class, 'editprofile'])->name('user.editprofile');

            // Rotas para quem possui o perfil de Administrador (onlyAdm)
            Route::group(['middleware' => 'can:onlyAdm'], function(){
                // USUÁRIO
                Route::get('/index-user', [UserController::class, 'index'])->name('user.index');
            });
            // Rotas para quem possui o perfil de Administrador e Consultor (onlyAdmCon)
            Route::group(['middleware' => 'can:onlyAdmCon'], function(){
                // USUÁRIO
                Route::get('pdf-user/relpdflistusers', [UserController::class, 'relpdflistusers'])->name('user.pdflistusers');
            });
        });


***************************************************************************
*    GERANDO RELATÓRIOS EXCEL CSV COM A BIBLIOTECA SPATIE SIMPLE EXCEL    *
***************************************************************************
1   -   No terminal, na pasta do seu projeto, instale a biblioteca com o comando abaixo:
        ./vendor/bin/sail composer require spatie/simple-excel

2   -   Crir a rota no arquivo routes/web.php para referenciar o método no controller DashboardController que ira executar a geração do Excel/CSV
        Route::get('/index-dashboard/gerarexcel', [DashboardController::class, 'gerarexcel'])->name('dashboard.gerarexcel');

3   -   Importar as classes no controller DashboardController, conforme abaixo:
        use Illuminate\Support\Facades\DB;
        use Spatie\SimpleExcel\SimpleExcelWriter;

4   -   Definir as variáveis de pesquisa (mês, ano, tipo de arquivo a ser gerado) bem como ano de implementação da aplicação no corpo do método index()
        do controller DashboardController conforme abaixo
        public function index()
        {
            // Definindo mês para computo dos dados OK!
            // $mes_corrente = date('m');   // número do mês no formato 01, 02, 03, 04 ..., 09, 10, 11, 12
            $mes_corrente = date('n');      // número do mês no formato 1, 2, 3, 4 ..., 9, 10, 11, 12
            $ano_corrente = date('Y');

            // Meses e anos para popular campos selects.
            // Obs: os índices do array não pode ser: 01, 02, 03, etc... por isso a configuração acima: $mes_corrente = date('n');
            //      caso os índices pudesser ser: 01, 02, 03, etc..., seria nno formato: $mes_corrente = date('m');
            $mesespesquisa = [
                '1' => 'janeiro', '2' => 'fevereiro', '3' => 'março', '4' => 'abril', '5' => 'maio', '6' => 'junho',
                '7' => 'julho', '8' => 'agosto', '9' => 'setembro', '10' => 'outubro', '11' => 'novembro', '12' => 'dezembro'
            ];

            $anoimplantacao = 2025;
            $anoatual = date("Y");
            $anospesquisa = [];
            $anos = [];

            if($anoimplantacao >= $anoatual){
                $anospesquisa[] = $anoatual;
            }else{
                $qtdanosexibicao = $anoatual - $anoimplantacao;
                for($a = $qtdanosexibicao; $a >= 0; $a--){
                    $anos[] = $anoatual - $a;   // $anoatual - 0 (quando $a for igual a zero) será igual ao ano corrente.
                }
                $anospesquisa = array_reverse($anos);
            }

            return view('admin.dashboards.dashboard', compact('mes_corrente','ano_corrente','mesespesquisa', 'anospesquisa'));
        }

5   -   Implementar o formulário para gerar o arquivo Excel/CSV na view resources/views/admin/dashboards/dashboard.blade.php
        ...

        <div class="mb-4 d-sm-flex align-items-center justify-content-between">
            <h1 class="mt-3">Dashboard</h1>

            {{-- inicio formulario baixar arquivo excel csv--}}
            <div class="col-md-5">
                <form action="{{ route('dashboard.gerarexcel') }}"  method="GET" class="form-inline" style="border-radius: 5px; margin-bottom: -15px;">

                    <div class="row">
                        <div class="col-md-2" style="margin-left: 180px;">
                            <select id="selectMesExcel" name="mesexcel"  class="form-control col-form-label-sm" style="margin-left: 5px;">
                                <option value="0">Mês...</option>
                                @foreach($mesespesquisa as $key => $value)
                                    <option value="{{ $key }}" {{date('n') == $key ? 'selected' : ''}} class="optionMesPesquisa"> {{ $value }} </option>
                                @endforeach
                            </select>
                        </div>

                        <div class="col-md-2">
                            <select id="selectAnoExcel"  name="anoexcel" class="form-control col-form-label-sm" style="margin-left: 5px;">
                                <option value="0" selected disabled>Ano...</option>
                                @foreach($anospesquisa as $value)
                                    <option value="{{ $value }}" {{date('Y') == $value ? 'selected' : ''}} class="optionAnoPesquisa"> {{ $value }} </option>
                                @endforeach
                            </select>
                        </div>

                        <div class="col-md-2">
                            <select id="selectTipoExcelCsv"  name="tipoexcelcsv" class="form-control" style="margin-left: 5px;">
                                <option value="0" selected>Tipo...</option>
                                <option value="1" class="optionAnoPesquisa"><b>EXCEL</b> </option>
                                <option value="2" class="optionAnoPesquisa"><b>CSV</b> </option>
                            </select>
                        </div>

                        <div class="col-md-3">
                            <button type="submit" class="mb-2 btn btn-success btn-sm form-control col-form-label-sm" style="margin-top: 3px;">
                                <i class="fas fa-download"></i>
                                <b>Gerar arquivo</b>
                            </button>
                        </div>
                    </div>
                </form>
            </div>
            {{--    fim formulario baixar arquivo excel csv--}}
        </div>

        ...

6   -   Implementar o método gerarexcel() ao corpo do controller DashboardController, como abaixo
        // Método utilizado com Biblioteca Spatie-Simple-Excel
        public function gerarexcel(Request $request)
        {

            $mes = $request->mesexcel;
            $ano = $request->anoexcel;
            $tipo = $request->tipoexcelcsv;


            // Testa se todos os parâmetros são válidos
            // if($mes != 0 && $ano != 0 && $tipo != 0){
            if($tipo != 0){

                // Adiciona um 0 (zero) na frente do mês de 01 a 09
                $mes = ($mes < 10) ? "0".$mes : $mes;

                // Define o nome do arquivo(formado por mês e ano ou apenas o ano)
                $referencia = ($mes == "00") ? $ano : $mes."_".$ano;

                // Define o tipo de arquivo a ser gerado
                $tipoextensao = ($tipo == 1) ? 'xlsx' : 'csv';

                // Definindo a query para recuperar os registros
                if($mes == 0){
                    $records = DB::table('users')->selectRaw(
                        'id, nomecompleto, nome, cpf, cargo, fone, perfil, email, ativo, DATE_FORMAT(created_at,"%d/%m/%Y") AS cadastrado')
                    ->whereYear('created_at', $ano)
                    ->get();

                }else{

                    $records = DB::table('users')->selectRaw(
                        'id, nomecompleto, nome, cpf, cargo, fone, perfil, email, ativo, DATE_FORMAT(created_at,"%d/%m/%Y") AS cadastrado')
                    ->whereMonth('created_at', $mes)
                    ->whereYear('created_at', $ano)
                    ->get();
                }

                // Definindo o cabeçalho das colunas no arquivo Excel gerado.
                $writer = SimpleExcelWriter::streamDownload("seducobras_$referencia.$tipoextensao")->addHeader([
                    'Registro', 'Nome Completo', 'Usuário', 'CPF', 'Cargo', 'Fone', 'Pefil', 'E-mail', 'Ativo', 'Cadastrado'
                ]);


                // Contador para esvaziar buffer com flush()
                $countbuffer = 1;

                foreach ($records as $record ) {
                    $writer->addRow([
                        'id' => $record->id,
                        'nomecompleto' => $record->nomecompleto,
                        'nome' => $record->nome,
                        'cpf' => $record->cpf,
                        'cargo' => $record->cargo,
                        'fone' => $record->fone,
                        'perfil' => $record->perfil,
                        'email' => $record->email,
                        'ativo' => ($record->ativo == 1 ? 'sim' : 'não'),
                        'created_at' => $record->cadastrado,
                    ]);

                    // Limpa o buffer a cada mil linhas
                    $countbuffer++;

                    if($countbuffer % 1000 === 0){
                        flush();
                    }
                }

                $writer->toBrowser();

            } else {
                return redirect()->route('dashboard.index')->with('error', 'Escolha um tipo de arquivo: Excel ou CSV, para ser gerado!');;
            }

        }


*****************************************************
*   GERANDO RELATÓRIOS PDFS COM A BIBLIOTECA MPDF   *
*****************************************************
1   -   No terminal, na pasta do seu projeto, instale a biblioteca com o comando abaixo:
        ./vendor/bin/sail composer require mpdf/mpdf

2   -   Crie no arquivo de rotas (routes/web.php) a rota para o método no controller que exibirá o relatório 'PDF', como abaixo:
        Route::get('pdf-user/relpdflistusers', [UserController::class, 'relpdflistusers'])->name('user.pdflistusers');

3   -   Crie o método relpdflistusers no controller UserController para testar a rota, como abaixo:
        public function relpdflistusers()
        {
            return "Relatório PDF";
        }

4    -  Crie o link na view index (ou onde desejar) para vincular à rota criada acima, como abaixo. Teste a rota clicando no link.
        <a href="{{ route('user.pdflistusers') }}" class="btn btn-secondary btn-sm me-1" target="_blank">
            <i class="fa-solid fa-file-pdf"></i> pdf
        </a>

5   -   Crie a pasta view/admin/users/pdfs. Nesta pasta será colocad todos os arquivos referente a relatórios PDF's referente a USUÁRIOS

6   -   Substitua o conteúdo do método "relpdflistusers()" do controller "UserController" pelo conteúdo abaixo
        public function relpdflistusers()
        {
            // Obtendo os dados
            $users = User::orderBy('nomecompleto')->get();

            // Definindo o nome do arquivo a ser baixado
            $fileName = ('Usuarios_lista.pdf');

            // Invocando a biblioteca mpdf e definindo as margens do arquivo
            $mpdf = new \Mpdf\Mpdf([
                'orientation' => 'L',
                'margin_left' => 10,
                'margin_right' => 10,
                'margin_top' => 30,
                'margin_bottom' => 15,
                'margin-header' => 10,
                'margin_footer' => 5
            ]);

            // Configurando o cabeçalho da página
            $mpdf->SetHTMLHeader('
                <table style="width:1080px; border-bottom: 1px solid #000000; margin-bottom: 3px;">
                    <tr>
                        <td style="width: 140px">
                            <img src="images/logo_seduc2.png" width="120"/>
                        </td>
                        <td style="width: 400px; font-size: 10px; font-family: Arial, Helvetica, sans-serif;">
                            Governo do Estado do Maranhão<br>
                            Secretaria de Estado da Educação / SEDUC<br>
                            Agência de Tecnologia da Informação / ATI<br>
                            Acompanhamento de Execução de Obras
                        </td>
                        <td style="width: 540px;" class="titulo-rel">
                            USUÁRIOS
                        </td>
                    </tr>
                </table>
                <table style="width:1080px; border-collapse: collapse">
                    <tr>
                        <td width="40px" class="col-header-table">ID</td>
                        <td width="275px" class="col-header-table">NOME</td>
                        <td width="100px" class="col-header-table">PERFIL</td>
                        <td width="315px" class="col-header-table">CAGO</td>
                        <td width="200px" class="col-header-table">E-mal</td>
                        <td width="100px" class="col-header-table">Telefone</td>
                        <td width="50px" class="col-header-table">ATIVO</td>
                    </tr>
                </table>
            ');

            // Configurando o rodapé da página
            $mpdf->SetHTMLFooter('
                <table style="width:1080px; border-top: 1px solid #000000; font-size: 10px; font-family: Arial, Helvetica, sans-serif;">
                    <tr>
                        <td width="200px">São Luis(MA) {DATE d/m/Y}</td>
                        <td width="830px" align="center"></td>
                        <td width="50px" align="right">{PAGENO}/{nbpg}</td>
                    </tr>
                </table>
            ');

            // Definindo a view que deverá ser renderizada como arquivo .pdf e passando os dados da pesquisa
            $html = \View::make('admin.users.pdfs.pdf_list_users', compact('users'));
            $html = $html->render();

            // Definindo o arquivo .css que estilizará o arquivo blade na view ('admin.users.pdfs.pdf_users')
            $stylesheet = file_get_contents('css/pdf/mpdf.css');
            $mpdf->WriteHTML($stylesheet, 1);

            // Transformando a view blade em arquivo .pdf e enviando a saida para o browse (I); 'D' exibe e baixa para o pc
            $mpdf->WriteHTML($html);
            $mpdf->Output($fileName, 'I');
        }



7   -   Crie o arquivo pdf_list_users.blade.php dentro da pasta view/admin/users/pdfs com o conteúdo abaixo:
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="X-UA-Compatible" content="ie=edge">
            <title>SEDUC - Obras</title>
        </head>

        <body>
            <table style="width: 1080px; border-collapse: collapse;">

                @foreach ($users as $user)
                    <tr @if($loop->even) style="background-color: #e3e3e3;" @endif>
                        <td style="width: 40px;" class="dados-lista">{{$user->id}}</td>
                        <td style="width: 275px;" class="dados-lista">{{$user->nomecompleto}}</td>
                        <td style="width: 100px;" class="dados-lista">
                            @if($user->perfil == 'adm')
                                <b>ADMINISTRADOR</b>
                            @elseif($user->perfil == 'con')
                                <b>Consultor</b>
                            @elseif($user->perfil == 'ope')
                                <b>Operador</b>
                            @endif
                        </td>
                        <td style="width: 315px;" class="dados-lista">{{ $user->cargo }}</td>
                        <td style="width: 200px;" class="dados-lista">{{ $user->email }}</td>
                        <td style="width: 100px;" class="dados-lista">{{ $user->fone}} </td>
                        <td style="width: 50px;" class="dados-lista">@if($user->ativo == 1 ) sim @else não @endif </td>
                    </tr>
                @endforeach

            </table>
        </body>
        </html>

        OBSERVAÇÃO:
        O tamanho das colunas da tabela no arquivo /views/admin/users/pdfs/pdf_list_users.blade.php deve coincidir com o
        tamanho das colunas definidas no cabeçalho no método "relpdflistusers()" do controller UsrerController

8   -   Crie o arquivo public/css/pdf/mpdf.css para definir os estilos que o arquiovo pdf_list_users.blade.php irá adotar para formatar o relatório PDF.

9   -   Clinck no link para gerar o arquivo .pdf e veja o arquivo .pdf ser gerado.


****************************************
*  AGRUPANDO ROTAS NO MIDDLEWARE AUTH  *
****************************************
1   -   Criar a rota do tipo "group", para agrupar as rotas em que o usuário deve está autenticado com o middleware "auth"
        Route::group(['middleware' => 'auth'], function(){
            ...
            // aqui, rotas que deva pertencer a este middleware
            ...
        });

2   -   Redirecionar o usuário para uma róta específica, caso o mesmo não esteja autenticado e queira acessar uma rota que exija autenticação.
        Modifique o método no arquivo: bootstrap/app.php, conforme abaixo:
            ...
            ->withMiddleware(function (Middleware $middleware) {
                $middleware->redirectGuestsTo('/');
            })
            ...

        OBSERVAÇÃO:
        Neste caso específico, a rota para a qual o usuário será redirecionado, caso não esteja autenticado será a rota raiz ('/')
             que representa a página de "login", conforme podemos observar no arquivo de rota routes/web.php
            ...
            Route::get('/', [LoginController::class, 'index'])->name('login.index');
            ...
            Se a mesma possuisse o nome login, deveriamos colocar o nome dela  acima (->withMiddleware(function (Middleware $middleware) {$middleware->redirectGuestsTo('/login');)


********************************************************
*  CONFIGURAÇÃO DA API DE ENVIO DE E-MAIL DA SEATI/ATI *
********************************************************
1   -   No arquivo: /home/marcio/projetosdocker/semu-aluguel-mp/config/mail.php configurar chaves conforme abaixo:

        'smtp' => [
            'transport' => 'smtp',
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'encryption' => env('MAIL_ENCRYPTION', 'tls'),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url(env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],

        'seatimail' => [
            'transport' => 'seatimail',
        ],

2   -   Criar o provider SeatiMailServiceProvider em App/Provider com o comando abaixo
        php artisan make:provider SeatiMailServiceProvider
        OU
        ./vendor/bin/sail artisan make:provider SeatiMailServiceProvider

3   -   Acrescentar o conteúdo abaixo no corpo do arquivo semu-aluguel-mp/app/Providers/SeatiMailServiceProvider.php

        <?php

        namespace App\Providers;

        use App\SeatiMail\SeatiMailManager;
        use Illuminate\Support\ServiceProvider;
        use Illuminate\Mail\MailServiceProvider;

        class SeatiMailServiceProvider extends ServiceProvider
        {

            public function register(): void
            {
                //
            }

            public function boot(): void
            {
                //
            }

            protected function registerIlluminateMailer()
            {
                $this->app->singleton('mail.manager', function ($app) {
                    return new SeatiMailManager($app);
                });

                // Copied from Illuminate\Mail\MailServiceProvider
                $this->app->bind('mailer', function ($app) {
                    return $app->make('mail.manager')->mailer();
                });
            }
        }

4   -   Acrescentar o provider criado acima no arquivo: seduc-acompanha-obras/bootstrap/providers.php, conforme abaixo:
        return [
            App\Providers\AppServiceProvider::class,
            App\Providers\SeatiMailServiceProvider::class,
        ];

5   -   Acrescentar no arquivo: semu-aluguel-mp/config/services.php o trecho de código abaixo:

        'seatimail' => [
                'url' => env('SEATI_MAIL_URL'),
                'key' => env('SEATI_MAIL_API_KEY'),
                'guzzle' => [
                    // 'verify' => base_path() . '/certificado/cacert.pem',
                    'verify' => false,
                    'connect_timeout' => 300,
                ],
            ],

6   -   Comentar as linhas de códiog do arquiov .env referente ao envio de email
        # MAIL_MAILER=smtp
        # MAIL_SCHEME=null
        # MAIL_HOST=mailpit
        # MAIL_PORT=1025
        # MAIL_USERNAME=null
        # MAIL_PASSWORD=null
        # MAIL_FROM_ADDRESS="hello@example.com"
        # MAIL_FROM_NAME="${APP_NAME}"


7   -   Acrescentar as linhas de código ao arquiovo .env referente a API de envio de email
        MAIL_MAILER=seatimail
        SEATI_MAIL_URL="https://ext.api.email.seati.ma.gov.br/api/mensagens/enviar"
        SEATI_MAIL_API_KEY="c2VtdS5hbHVndWVsOiQyYSQxMiRaR29XZWxuaC9XazhRMUQwT1gzS0YuL0NPUFEwdDlBZFlVN3A4QnZtdjZMRHFPVmJnSlFVVw=="

8   -   Criar a rota de teste de Envio de E-maio no arquivo: seduc-acompanha-obras/routes/web.php conforme abaixo:
        Route::get('enviaremail', function() {
            $destinatario = 'diego.cicero@seati.ma.gov.br';
            $mensagem = "Olá, este é um e-mail de teste apenas em texto!";

            Mail::raw($mensagem, function ($message) use ($destinatario) {
                $message->to($destinatario)
                        ->subject('Assunto do E-mail');
            });

        });

9   -   Copiar a pasta SeatiMail e todo seu conteúdo, arquivos e pastas para a pasta app
        a) arquivos: app/SeatiMail/SeatiMailManager.php
        b) pasta: app/SeatiMail/Transport
            b.1) Arquivos desta pasta: app/SeatiMail/Transport/SeatiMailTransport.php

